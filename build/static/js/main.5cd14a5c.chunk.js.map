{"version":3,"sources":["components/Header.js","solana/index.js","components/Card.js","components/Form.js","App.js","index.js"],"names":["setRoute","className","style","href","onClick","cluster","connection","Connection","wallet","Wallet","programId","PublicKey","setPayerAndBlockhashTransaction","instructions","a","transaction","Transaction","forEach","element","add","feePayer","publicKey","getRecentBlockhash","hash","recentBlockhash","blockhash","signAndSendTransaction","console","log","signTransaction","signedTrans","sendRawTransaction","serialize","signature","CampaignDetails","properties","Object","keys","key","checkWallet","connected","connect","createCampaign","name","description","image_link","SEED","Math","random","toString","createWithSeed","newAccount","campaign","admin","toBuffer","amount_donated","data","schema","data_to_send","Uint8Array","getMinimumBalanceForRentExemption","length","lamports","createProgramAccount","SystemProgram","createAccountWithSeed","fromPubkey","basePubkey","seed","newAccountPubkey","space","instructionTOOurProgram","TransactionInstruction","pubkey","isSigner","isWritable","trans","confirmTransaction","result","getAllCampaigns","getProgramAccounts","accounts","x","e","campData","deserialize","account","push","pubId","err","donateToCampaign","campaignPubKey","amount","Map","kind","fields","WithdrawRequest","withdraw","withdrawRequest","Card","setCards","useState","setAmount","onDonate","preventDefault","id","newCards","onWithdraw","alert","src","image","title","type","placeholder","onChange","target","value","Form","setName","setDescription","setImageLink","onSubmit","App","route","cards","useEffect","then","val","Header","map","idx","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cd14a5c.chunk.js","sourcesContent":["import React from 'react';\nexport default ({ setRoute }) => {\n    return (\n        <div className=\"ui menu black\" style={{ 'marginTop': '5px' }}>\n            <a href=\"/#\" className=\"ui header item\" onClick={() => setRoute(0)}>Funding</a>\n            <a href=\"/#\" className=\"ui item\" onClick={() => setRoute(0)}>Campaigns</a>\n            <div className=\"right menu\">\n                <a href=\"/#\" className=\"item\" onClick={() => setRoute(1)}>Create Campaign</a>\n            </div>\n\n        </div>\n    );\n};","import Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {\n    Connection,\n    SystemProgram,\n    Transaction,\n    PublicKey,\n    TransactionInstruction\n} from \"@solana/web3.js\";\nimport { deserialize, serialize } from \"borsh\";\n\nconst cluster = \"https://api.devnet.solana.com\";\nconst connection = new Connection(cluster, \"confirmed\");\nconst wallet = new Wallet(\"https://www.sollet.io\", cluster);\nconst programId = new PublicKey(\n    \"286rapsUbvDe1ZgBeNhp37YHvEPwWPTr4Bkce4oMpUKT\"\n);\n\n\nexport async function setPayerAndBlockhashTransaction(instructions) {\n    const transaction = new Transaction();\n    instructions.forEach(element => {\n        transaction.add(element);\n    });\n    transaction.feePayer = wallet.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    transaction.recentBlockhash = hash.blockhash;\n    return transaction;\n}\n\nexport async function signAndSendTransaction(transaction) {\n    try {\n        console.log(\"start signAndSendTransaction\");\n        let signedTrans = await wallet.signTransaction(transaction);\n        console.log(\"signed transaction\");\n        let signature = await connection.sendRawTransaction(\n            signedTrans.serialize()\n        );\n        console.log(\"end signAndSendTransaction\");\n        return signature;\n    } catch (err) {\n        console.log(\"signAndSendTransaction error\", err);\n        throw err;\n    }\n}\n\nclass CampaignDetails {\n    constructor(properties) {\n        Object.keys(properties).forEach((key) => {\n            this[key] = properties[key];\n        });\n    }\n    static schema = new Map([[CampaignDetails,\n        {\n            kind: 'struct',\n            fields: [\n                ['admin', [32]],\n                ['name', 'string'],\n                ['description', 'string'],\n                ['image_link', 'string'],\n                ['amount_donated', 'u64']]\n        }]]);\n}\nasync function checkWallet() {\n    if (!wallet.connected) {\n        await wallet.connect();\n    }\n}\n\nexport async function createCampaign(\n    name, description, image_link\n) {\n    await checkWallet();\n\n    const SEED = \"abcdef\" + Math.random().toString();\n    let newAccount = await PublicKey.createWithSeed(\n        wallet.publicKey,\n        SEED,\n        programId\n    );\n\n    let campaign = new CampaignDetails({\n        name: name,\n        description: description,\n        image_link: image_link,\n        admin: wallet.publicKey.toBuffer(),\n        amount_donated: 0\n    })\n\n    let data = serialize(CampaignDetails.schema, campaign);\n    let data_to_send = new Uint8Array([0, ...data]);\n\n    const lamports =\n        (await connection.getMinimumBalanceForRentExemption(data.length));\n    console.log(data.length);\n    const createProgramAccount = SystemProgram.createAccountWithSeed({\n        fromPubkey: wallet.publicKey,\n        basePubkey: wallet.publicKey,\n        seed: SEED,\n        newAccountPubkey: newAccount,\n        lamports: lamports,\n        space: data.length,\n        programId: programId,\n    });\n\n    const instructionTOOurProgram = new TransactionInstruction({\n        keys: [\n            { pubkey: newAccount, isSigner: false, isWritable: true },\n            { pubkey: wallet.publicKey, isSigner: true, }\n        ],\n        programId: programId,\n        data: data_to_send,\n    });\n\n    const trans = await setPayerAndBlockhashTransaction(\n        [createProgramAccount, instructionTOOurProgram]\n    );\n    const signature = await signAndSendTransaction(trans);\n    const result = await connection.confirmTransaction(signature);\n    console.log(\"end sendMessage\", result);\n}\n\n\nexport async function getAllCampaigns() {\n    let accounts = await connection.getProgramAccounts(programId);\n    let x = []\n    accounts.forEach((e) => {\n        try {\n            let campData = deserialize(CampaignDetails.schema, CampaignDetails, e.account.data);\n            x.push({\n                pubId: e.pubkey,\n                name: campData.name,\n                description: campData.description,\n                image_link: campData.image_link,\n                amount_donated: campData.amount_donated,\n                admin: campData.admin,\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    });\n    return x;\n}\n\n\n\nexport async function donateToCampaign(\n    campaignPubKey, amount\n) {\n    await checkWallet();\n\n    const SEED = \"abcdef\" + Math.random().toString();\n    let newAccount = await PublicKey.createWithSeed(\n        wallet.publicKey,\n        SEED,\n        programId\n    );\n\n    const createProgramAccount = SystemProgram.createAccountWithSeed({\n        fromPubkey: wallet.publicKey,\n        basePubkey: wallet.publicKey,\n        seed: SEED,\n        newAccountPubkey: newAccount,\n        lamports: amount,\n        space: 1,\n        programId: programId,\n    });\n\n    const instructionTOOurProgram = new TransactionInstruction({\n        keys: [\n            { pubkey: campaignPubKey, isSigner: false, isWritable: true },\n            { pubkey: newAccount, isSigner: false, },\n            { pubkey: wallet.publicKey, isSigner: true, }\n        ],\n        programId: programId,\n        data: new Uint8Array([2])\n    });\n\n\n    const trans = await setPayerAndBlockhashTransaction(\n        [createProgramAccount, instructionTOOurProgram]\n    );\n    const signature = await signAndSendTransaction(trans);\n    const result = await connection.confirmTransaction(signature);\n    console.log(\"end sendMessage\", result);\n}\n\n\n\nclass WithdrawRequest {\n    constructor(properties) {\n        Object.keys(properties).forEach((key) => {\n            this[key] = properties[key];\n        });\n    }\n    static schema = new Map([[WithdrawRequest,\n        {\n            kind: 'struct',\n            fields: [\n                ['amount', 'u64'],\n            ]\n        }]]);\n\n}\n\nexport async function withdraw(\n    campaignPubKey, amount\n) {\n    await checkWallet();\n    let withdrawRequest = new WithdrawRequest({ amount: amount });\n    let data = serialize(WithdrawRequest.schema, withdrawRequest);\n    let data_to_send = new Uint8Array([1, ...data]);\n\n    const instructionTOOurProgram = new TransactionInstruction({\n        keys: [\n            { pubkey: campaignPubKey, isSigner: false, isWritable: true },\n            { pubkey: wallet.publicKey, isSigner: true, }\n        ],\n        programId: programId,\n        data: data_to_send\n    });\n    const trans = await setPayerAndBlockhashTransaction(\n        [instructionTOOurProgram]\n    );\n    const signature = await signAndSendTransaction(trans);\n    const result = await connection.confirmTransaction(signature);\n    console.log(\"end sendMessage\", result);\n}","import { useState } from \"react\";\nimport { donateToCampaign, getAllCampaigns, withdraw } from \"../solana\";\n\nconst Card = ({ data, setCards }) => {\n    const [amount, setAmount] = useState(0);\n    const onDonate = async (e) => {\n        e.preventDefault();\n        await donateToCampaign(data.id, amount);\n        let newCards = await getAllCampaigns();\n        setCards(newCards);\n    }\n    const onWithdraw = async (e) => {\n        e.preventDefault();\n        try {\n            await withdraw(data.id, amount);\n            alert('Withdraw successful!');\n        } catch (e) {\n            console.log(e);\n            alert(\"only admin can withdraw\");\n        }\n        let newCards = await getAllCampaigns();\n        setCards(newCards);\n\n    }\n    return (\n        <div>\n            <div className=\"ui card fluid\">\n                <div className=\"image\">\n                    <img src={data.image} />\n                </div>\n                <div className=\"content\">\n                    <div className=\"header\">{data.title}</div>\n\n                    <div>\n                        <span>Raised: {data.amount}</span>\n                    </div>\n                    <p>{data.description}</p>\n\n                    <form className=\"ui form container\">\n                        <div className=\"ui grid\">\n                            <div className=\"row\">\n                                <div className=\"column thirteen wide\">\n                                    <div className=\"field\">\n                                        <input type=\"text\" name=\"amount\" placeholder=\"Amount to donate\" onChange={(e) => setAmount(e.target.value)} />\n                                    </div>\n                                </div>\n                                <div className=\"column\">\n                                    <button className=\"ui button\" type=\"submit\" onClick={(e) => onDonate(e)} >Donate</button>\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                    <div>Only admin can withdraw </div>\n                    <form className=\"ui form container\">\n                        <div className=\"ui grid\">\n                            <div className=\"row\">\n                                <div className=\"column thirteen wide\">\n                                    <div className=\"field\">\n                                        <input type=\"text\" name=\"amount\" placeholder=\"Amount to withdraw\" onChange={(e) => setAmount(e.target.value)} />\n                                    </div>\n                                </div>\n                                <div className=\"column\">\n                                    <button className=\"ui button\" type=\"submit\" onClick={(e) => onWithdraw(e)} >Withdraw</button>\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import { useState } from \"react\";\nimport { createCampaign } from \"../solana\";\nconst Form = ({setRoute}) => {\n    const [name, setName] = useState('')\n    const [description, setDescription] = useState('')\n    const [image, setImageLink] = useState('')\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        await createCampaign(name, description, image);\n        setRoute(0);\n    }\n\n    return (\n        <form className=\"ui form\">\n            <div className=\"field\">\n                <label>Title</label>\n                <input type=\"text\" name=\"title\" placeholder=\"Title\" onChange={(e) => setName(e.target.value)}\n                />\n            </div>\n            <div className=\"field\">\n                <label>Description</label>\n                <input type=\"text\" name=\"description\" placeholder=\"Description\" onChange={(e) => setDescription(e.target.value)} />\n            </div>\n            <div className=\"field\">\n                <label>Image Link</label>\n                <input type=\"text\" name=\"imageLink\" placeholder=\"imageLink\" onChange={(e) => setImageLink(e.target.value)} />\n            </div>\n            <button className=\"ui button\" type=\"submit\" onClick={onSubmit} >Submit</button>\n        </form>\n    );\n}\n\nexport default Form;","import React, { useEffect, useState } from 'react';\n\nimport Header from './components/Header';\nimport Card from './components/Card';\nimport Form from './components/Form';\nimport { getAllCampaigns } from \"./solana\";\nconst App = () => {\n  const [route, setRoute] = useState(0);\n  const [cards, setCards] = useState([]);\n  useEffect(() => {\n    getAllCampaigns().then((val) => {\n      setCards(val);\n      console.log(val);\n    });\n  }, []);\n  return (\n    <div className=\"ui container\">\n      <Header setRoute={setRoute} />\n      {route === 0 ?\n        <div>{\n          cards.map((e, idx) => (\n            <Card\n              key={e.pubId.toString()}\n              data={{\n                title: e.name,\n                description: e.description,\n                amount: (e.amount_donated).toString(),\n                image: e.image_link,\n                id: e.pubId,\n              }}\n              setCards={setCards} />\n          ))\n        }\n        </div>\n        :\n        <Form setRoute={(e) => {\n          setRoute(e);\n          getAllCampaigns().then((val) => {\n            setCards(val);\n          });\n        }} />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}